apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: nodejs-express-api
  title: Node.js Express API with Swagger
  description: Create a Node.js Express API with Swagger documentation and Backstage integration
  tags:
    - nodejs
    - express
    - swagger
    - openapi
    - recommended
    - api
    - bancorocks
spec:
  owner: group:platform-team
  type: service
  parameters:
    - title: Provide API information
      required:
        - component_id
        - description
        - owner
        - system
        - lifecycle
      properties:
        component_id:
          title: Component Name
          type: string
          description: Name of the component (will be used in repository name)
          pattern: '^[a-z0-9-]+$'
          ui:field: EntityNamePicker
          ui:help: 'Use lowercase letters, numbers and dashes only'
        description:
          title: Description
          type: string
          description: Help others understand what this API is for
          minLength: 10
        owner:
          title: Owner
          type: string
          description: Owner of the component
          ui:field: OwnerPicker
          ui:options:
            allowedKinds:
              - Group
        system:
          title: System
          type: string
          description: System this API belongs to (domain will be extracted from system name)
          ui:field: EntityPicker
          ui:options:
            allowedKinds:
              - System
          ui:help: 'Repository will be named: rocks.{system-domain}-{component-name}'
        lifecycle:
          title: Lifecycle
          type: string
          description: Application lifecycle
          default: experimental
          enum:
            - experimental
            - production
            - deprecated
        port:
          title: Port
          type: number
          description: Port to run the API on
          default: 3000
          minimum: 3000
          maximum: 9999
    - title: Repository Preview
      description: 'Review how your repository will be created based on your selections'
      required:
        - confirmCreation
      properties:
        repoPreview:
          title: Repository Details
          type: string
          description: |
            The repository will be created with the following structure:
            
            üèóÔ∏è **Naming Pattern:** rocks.{domain}-{component_id}
            üìÅ **Organization:** bancorocks
            üåê **Base URL:** https://github.com/bancorocks/
            
            ‚öôÔ∏è **How it works:**
            - Domain is extracted from the selected System
            - Component name becomes part of the repository name
            - Final format: rocks.{extracted-domain}-{your-component-name}
            
            üìù **Examples:**
            - System: "system:default/accounts" + Component: "user-api" = rocks.accounts-user-api
            - System: "system:payments" + Component: "transaction-service" = rocks.payments-transaction-service
            - System: "system:default/cards" + Component: "creditcard-api" = rocks.cards-creditcard-api
            
            üîß **What will be created:**
            - GitHub repository with standardized name
            - README.md with component documentation
            - package.json with proper naming
            - Swagger/OpenAPI documentation
            - Basic Express.js structure
            - Backstage catalog-info.yaml
          ui:widget: textarea
          ui:options:
            rows: 15
          ui:readonly: true
        confirmCreation:
          title: Confirm Repository Creation
          type: boolean
          description: 'I have reviewed the naming pattern above and want to proceed with repository creation'
          default: false
  steps:
    - id: extract-domain
      name: Extract Domain from System
      action: debug:log
      input:
        message: 'System selected: ${{ parameters.system }}, Component: ${{ parameters.component_id }}'
        
    - id: fetch-base
      name: Fetch Base Template
      action: fetch:template
      input:
        url: ./skeleton
        copyWithoutTemplating:
          - .github/workflows/*
        values:
          component_id: ${{ parameters.component_id }}
          domain: ${{ parameters.system | replace('system:default/', '') | replace('system:', '') }}
          repo_name: rocks.${{ parameters.system | replace('system:default/', '') | replace('system:', '') }}-${{ parameters.component_id }}
          description: ${{ parameters.description }}
          owner: ${{ parameters.owner }}
          system: ${{ parameters.system }}
          lifecycle: ${{ parameters.lifecycle }}
          port: ${{ parameters.port }}
          organization: bancorocks
          
    - id: publish
      name: Publish to GitHub
      action: publish:github
      input:
        description: ${{ parameters.description }}
        repoUrl: github.com?owner=bancorocks&repo=rocks.${{ parameters.system | replace('system:default/', '') | replace('system:', '') }}-${{ parameters.component_id }}
        defaultBranch: main
        deleteBranchOnMerge: true
        gitCommitMessage: 'feat: initial project setup from backstage template'
        gitAuthorName: Backstage Scaffolder
        gitAuthorEmail: backstage@bancorocks.com
        
    - id: register
      name: Register in Software Catalog
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'
        
  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
        icon: github
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
    text:
      - title: Repository Created
        content: |
          **Repository Name:** `rocks.${{ parameters.system | replace('system:default/', '') | replace('system:', '') }}-${{ parameters.component_id }}`
          
          **Next steps:**
          1. Clone: `git clone ${{ steps.publish.output.remoteUrl }}`
          2. Install: `npm install`
          3. Start: `npm run dev`
          4. Swagger docs: `http://localhost:${{ parameters.port }}/api-docs`
